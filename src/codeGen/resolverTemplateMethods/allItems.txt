    async all${objName}s(root, args, context, ast) {
      let db = await (typeof root.db === "function" ? root.db() : root.db);
      await runHook("queryPreprocess", { db, root, args, context, ast });
      context.__mongodb = db;
      let queryPacket = decontructGraphqlQuery(args, ast, ${objName}Metadata, "${objName}s");
      let { aggregationPipeline } = queryPacket;
      await runHook("queryMiddleware", queryPacket, { db, root, args, context, ast });
      let result = {};

      result.Meta = {};
      if (aggregationPipeline.find(item => item.$project)) {
        let start = process.hrtime();
        result.${objName}s = await load${objName}s(db, aggregationPipeline, root, args, context, ast, "${objName}s");        
        let [endS, endNS] = process.hrtime(start);
        result.Meta.queryElapsedTime = (endS + (endNS / 1e9));
      }

      if (queryPacket.metadataRequested.size) {
        if (queryPacket.metadataRequested.get("count")) {
          let $match = aggregationPipeline.find(item => item.$match);
          let countResults = await dbHelpers.runQuery(db, "${table}", [$match, { $group: { _id: null, count: { $sum: 1 } } }]);  
          result.Meta.count = countResults.length ? countResults[0].count : 0;
        }
      }

      return result;
    }